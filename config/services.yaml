# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
  elastic:
    hosts:
      - '%env(ELASTIC_ADDR)%'

  exception_to_status:
    InvalidArgumentException: 400
    Romaind\PizzaStore\Domain\User\Exception\InvalidCredentialsException: 401
    Romaind\PizzaStore\Domain\User\Exception\ForbiddenException: 403
    Romaind\PizzaStore\Infrastructure\Shared\Persistence\ReadModel\Exception\NotFoundException: 404
    Broadway\Repository\AggregateNotFoundException: 404

services:
  # Needed since Since symfony/dependency-injection 5.1
  Symfony\Component\DependencyInjection\ContainerInterface: '@service_container'

  # default configuration for services in *this* file
  _defaults:
    autowire: true      # Automatically injects dependencies in your services.
    autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
    bind:
      $elasticConfig: '%elastic%'
      $eventBus: '@broadway.event_handling.event_bus'
      $eventStore: '@Broadway\EventStore\Dbal\DBALEventStore'

  # makes classes in src/ available to be used as services
  # this creates a service per class whose id is the fully-qualified class name
  Romaind\PizzaStore\:
    resource: '../src/'
  #        exclude:
  #            - '../src/DependencyInjection/'
  #            - '../src/Entity/'
  #            - '../src/Kernel.php'
  #            - '../src/Tests/'

  # controllers are imported separately to make sure services can be injected
  # as action arguments even if you don't extend any base controller class
  #    Romaind\Controller\:
  #        resource: '../src/Controller/'
  #        tags: ['controller.service_arguments']


  # add more service definitions when explicit configuration is needed
  # please note that last definitions always *replace* previous ones

  _instanceof:
    Yoanm\JsonRpcServer\Domain\JsonRpcMethodInterface:
      tags: [ 'app.json_rpc_method' ]

    Romaind\PizzaStore\Application\Command\CommandHandlerInterface:
      public: true
      tags:
        - { name: messenger.message_handler, bus: messenger.bus.command }

    Romaind\PizzaStore\Infrastructure\Shared\Bus\AsyncEvent\AsyncEventHandlerInterface:
      public: true
      tags:
        - { name: messenger.message_handler, bus: messenger.bus.event.async }
    Romaind\PizzaStore\Application\Query\QueryHandlerInterface:
      public: true
      tags:
        - { name: messenger.message_handler, bus: messenger.bus.query }

    Broadway\EventHandling\EventListener:
      public: true
      tags:
        - { name: broadway.domain.event_listener }

  ## Mapping aware service
  mapping_aware_service:
    public: true # In order to allow Behat context to load it later
    class: Romaind\PizzaStore\Infrastructure\Server\JsonRpcServer\Collector\MappingCollector
    tags: [ 'json_rpc_http_server.method_aware' ]

  ### Event Store
  Broadway\EventStore\Dbal\DBALEventStore:
    public: true
    arguments:
      - '@doctrine.dbal.default_connection'
      - '@broadway.serializer.payload'
      - '@broadway.serializer.metadata'
      - 'events'
      - false
      - '@broadway.uuid.converter'

  ### Messenger command BUS
  Romaind\PizzaStore\Infrastructure\Shared\Bus\Command\MessengerCommandBus:
    arguments:
      - '@messenger.bus.command'

  ### Messenger async event BUS
  Romaind\PizzaStore\Infrastructure\Shared\Bus\AsyncEvent\MessengerAsyncEventBus:
    arguments:
      - '@messenger.bus.event.async'

  ### Messenger query BUS
  Romaind\PizzaStore\Infrastructure\Shared\Bus\Query\MessengerQueryBus:
    arguments:
      - '@messenger.bus.query'

  ### UI
  Romaind\PizzaStore\UI\Http\Rest\Controller\:
    resource: '../src/UI/Http/Rest/Controller/*'
    tags: [ 'controller.service_arguments' ]

  ### UI Listeners
  Romaind\PizzaStore\UI\Http\Rest\EventSubscriber\ExceptionSubscriber:
    arguments:
      - "%kernel.environment%"
      - "%exception_to_status%"
    tags:
      - { name: 'kernel.event_listener', event: 'kernel.exception' }

  Romaind\PizzaStore\UI\Http\Rest\EventSubscriber\JsonBodyParserSubscriber:
    tags:
      - { name: 'kernel.event_listener', event: 'kernel.request', method: 'onKernelRequest', priority: 100 }