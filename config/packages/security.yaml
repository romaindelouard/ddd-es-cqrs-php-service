security:
  encoders:
    bcrypt:
      algorithm: bcrypt
      cost: 12
  # https://symfony.com/doc/current/security/experimental_authenticators.html
  #  enable_authenticator_manager: true
  # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
  providers:
    #users_in_memory: { memory: null }
    users:
      id: 'Romaind\PizzaStore\Infrastructure\User\Authentication\UserProvider'
  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false
      #    main:
      #      anonymous: true
      #      lazy: true
      #      provider: users_in_memory

      # activate different ways to authenticate
      # https://symfony.com/doc/current/security.html#firewalls-authentication

      # https://symfony.com/doc/current/security/impersonating_user.html
      # switch_user: true

    #      custom_authenticators:
    #        - Romaind\PizzaStore\Infrastructure\Symfony5\Security\LoginFormAuthentificator
    api_doc:
      pattern: ^/api/doc
      stateless: true
      anonymous: true

    api_auth:
      pattern: ^/api/auth
      stateless: true
      anonymous: true

    api_signup:
      pattern: ^/api/register
      stateless: true
      anonymous: true

    api_secured:
      pattern: ^/api
      provider: users
      stateless: true
      guard:
        authenticators:
          - lexik_jwt_authentication.jwt_token_authenticator

    secured_area:
      pattern: ^/
      provider: users
      anonymous: ~
      guard:
        entry_point: 'Romaind\PizzaStore\Infrastructure\User\Authentication\Guard\LoginAuthenticator'
        authenticators:
          - 'Romaind\PizzaStore\Infrastructure\User\Authentication\Guard\LoginAuthenticator'
      form_login:
        login_path: /login
        check_path: login
      logout:
        path: /logout
        target: /

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  access_control:
    # - { path: ^/admin, roles: ROLE_ADMIN }
    # - { path: ^/profile, roles: ROLE_USER }
    - { path: ^/profile, roles: ROLE_USER }
    #    - { path: ^/api/healthz, roles: IS_AUTHENTICATED_ANONYMOUSLY }
    - { path: ^/api/auth, roles: IS_AUTHENTICATED_ANONYMOUSLY }
    - { path: ^/api/register, roles: IS_AUTHENTICATED_ANONYMOUSLY }
    - { path: ^/api/doc, roles: IS_AUTHENTICATED_ANONYMOUSLY }
    - { path: ^/api/, roles: IS_AUTHENTICATED_FULLY }
    - { path: ^/, roles: IS_AUTHENTICATED_ANONYMOUSLY }
