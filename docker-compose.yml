version: "2.4"

services:
  pizza-service: &base
    image: pizza-service-php-${PHP_VERSION}:${APP_ENV}
    ports:
      - 9000
    user: 33:1000
    volumes:
      - .:/var/www/html:cached
      - /var/www/html/public/bundles
      - /var/www/html/vendor
    networks:
      - dev
    dns: 8.8.8.8
    command: php-fpm
    depends_on:
      - init
  workers_events:
    <<: *base
    command: ["bin/console", "messenger:consume", "events", "-vv"]
  init:
    <<: *base
    image: pizza-service-php-${PHP_VERSION}:${APP_ENV}
    command: make init
    volumes:
      - /var/www/html
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      blackfire:
        condition: service_started
      redis:
        condition: service_healthy
    restart: on-failure
  nginx:
    image: nginx:1.17.9
    ports:
      - 8080:8080
    volumes:
      - .:/var/www/html/:cached
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
    networks:
      - dev
    depends_on:
      - pizza-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/"]
      interval: 30s
      timeout: 30s
      retries: 5
  # Postgres database server
  postgres:
    image: postgres:13
    restart: always
    environment:
      POSTGRES_USER: username
      POSTGRES_PASSWORD: password
      POSTGRES_DB: pizza
    ports:
      - 5432:5432
    volumes:
      - dev-postgres-data:/var/lib/postgresql/data
      - ./docker/postgresql/initdb.sh:/docker-entrypoint-initdb.d/initdb.sh
    command:
      ["postgres", "-c", "log_statement=all", "-c", "log_destination=stderr"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d pizza"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - dev
  rabbitmq:
    image: rabbitmq:3-management
    environment:
      RABBITMQ_NODENAME: "rabbit"
      RABBITMQ_ERLANG_COOKIE: "SWQOKODSQALRPCLNMEQG"
      RABBITMQ_DEFAULT_USER: "guest"
      RABBITMQ_DEFAULT_PASS: "guest"
      RABBITMQ_DEFAULT_VHOST: "/"
    ports:
      # The standard AMQP protocol port
      - 5672:5672
      # HTTP management UI
      - 15672:15672
    hostname: rabbitmq
    volumes:
      - dev-rabbitmq-data:/var/lib/rabbitmq/data
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 15
      start_period: 20s
    networks:
      - dev
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.2
    ports:
      - 9200:9200
      - 9300:9300
    environment:
      - discovery.type=single-node
      - cluster.name=events
      - bootstrap.memory_lock=true
      #- cluster.routing.allocation.disk.threshold_enabled=false
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - http.host=0.0.0.0
      - http.port=9200
      - "http.cors.allow-origin=http://localhost:9100"
      - "http.cors.enabled=true"
      - "http.cors.allow-headers=X-Requested-With,X-Auth-Token,Content-Type,Content-Length,Authorization"
      - "http.cors.allow-credentials=true"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    mem_limit: 1g
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 30s
      retries: 5
    volumes:
      - dev-elasticsearch-data:/var/lib/elasticsearch
    networks:
      - dev
  elasticsearch-head:
    image: mobz/elasticsearch-head:5-alpine
    ports:
      - 9100:9100
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - dev
  blackfire:
    image: blackfire/blackfire
    ports:
      - 8707:8707
    environment:
      BLACKFIRE_SERVER_ID: ~
      BLACKFIRE_SERVER_TOKEN: ~
      BLACKFIRE_CLIENT_ID: ~
      BLACKFIRE_CLIENT_TOKEN: ~
      BLACKFIRE_LOG_LEVEL: 4
    networks:
      - dev
  filebeat:
    image: docker.elastic.co/beats/filebeat:7.10.2
    user: root
    volumes:
      - ./var/filebeat/log/:/var/log/:ro
      - ./var/filebeat/docker.sock:/var/run/docker.sock
      - ./docker/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml
      - ./var/log:/var/lib/docker/containers/logs:ro
    command: ["--strict.perms=false"]
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - dev
  kibana:
    image: docker.elastic.co/kibana/kibana:7.10.2
    ports:
      - 5601:5601
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - dev
  logstash:
    image: docker.elastic.co/logstash/logstash:7.10.2
    ports:
      - 5000:5000
      - 5044:5044
      - 9600:9600
    volumes:
      - ./docker/logstash/pipelines.yml:/usr/share/logstash/config/pipelines.yml:cached
      - ./docker/logstash/conf.d:/etc/logstash/conf.d:cached
      - ./var/log:/logs
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - dev
  prometheus:
    image: prom/prometheus:v2.25.0
    ports:
      - 9090:9090
    volumes:
      - ./docker/prometheus/:/etc/prometheus/
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
    healthcheck:
      test: ["CMD", "wget", "-q", "-t 1", "--spider", "http://localhost:9090"]
      interval: 30s
      timeout: 20s
      retries: 3
    depends_on:
      nginx:
        condition: service_started
    networks:
      - dev
  redis:
    image: redis:6.2-alpine
    ports:
      - 6379:6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s
      timeout: 3s
      retries: 30
    networks:
      - dev
networks:
  dev:
    external: true

volumes:
  dev-elasticsearch-data:
    external: true
  dev-postgres-data:
    external: true
  dev-rabbitmq-data:
    external: true
