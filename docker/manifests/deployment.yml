# Postgres database server
##########################
# PostgreSQL config map
# can be replaced by secrets https://stackoverflow.com/questions/61143161/how-to-get-into-postgres-in-kubernetes-with-local-dev-minikube
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-credentials
  labels:
    app: postgres
data:
  POSTGRES_DB: pizza
  POSTGRES_USER: username
  POSTGRES_PASSWORD: password
---
# PostgreSQL persistent Volume
apiVersion: v1
kind: PersistentVolume
metadata:
  name: postgres-pv
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 2Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /data/postgres-pv
---
# PostgreSQL persistent Volume Claim
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  labels:
    type: local
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
  volumeName: postgres-pv
---
# PostgreSQL deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres-container
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: postgres-container
    spec:
      containers:
        - env:
            - name: POSTGRES_DB
              valueFrom:
                configMapKeyRef:
                  name: postgres-credentials
                  key: POSTGRES_DB
            - name: POSTGRES_PASSWORD
              valueFrom:
                configMapKeyRef:
                  name: postgres-credentials
                  key: POSTGRES_PASSWORD
            - name: POSTGRES_USER
              valueFrom:
                configMapKeyRef:
                  name: postgres-credentials
                  key: POSTGRES_USER
          image: postgres:13-alpine
          name: postgres-container
          ports:
            - containerPort: 5432
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: postgres-volume-mount
      restartPolicy: Always
      volumes:
        - name: postgres-volume-mount
          persistentVolumeClaim:
            claimName: postgres-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: postgresql
  labels:
    app: postgresql
spec:
  ports:
    - port: 5432
      protocol: TCP
      targetPort: 5432
  selector:
    app: postgres-container
  type: ClusterIP
---
# RabbitMQ server
#################
# RabbitMQ config map
apiVersion: v1
kind: ConfigMap
metadata:
  name: rabbitmq-credentials
  labels:
    app: rabbitmq
data:
  RABBITMQ_NODENAME: "rabbit"
  RABBITMQ_ERLANG_COOKIE: "SWQOKODSQALRPCLNMEQG"
  RABBITMQ_DEFAULT_USER: "guest"
  RABBITMQ_DEFAULT_PASS: "guest"
  RABBITMQ_DEFAULT_VHOST: "/"
---
# RabbitMQ persistent Volume
apiVersion: v1
kind: PersistentVolume
metadata:
  name: rabbitmq-pv
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 2Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /data/rabbitmq-pv
---
# RabbitMQ persistent Volume Claim
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: rabbitmq-pvc
  labels:
    type: local
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
  volumeName: rabbitmq-pv
---
# RabbitMQ deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rabbitmq-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: rabbitmq-container
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: rabbitmq-container
    spec:
      containers:
        - env:
            - name: RABBITMQ_NODENAME
              valueFrom:
                configMapKeyRef:
                  name: rabbitmq-credentials
                  key: RABBITMQ_NODENAME
            - name: RABBITMQ_ERLANG_COOKIE
              valueFrom:
                configMapKeyRef:
                  name: rabbitmq-credentials
                  key: RABBITMQ_ERLANG_COOKIE
            - name: RABBITMQ_DEFAULT_USER
              valueFrom:
                configMapKeyRef:
                  name: rabbitmq-credentials
                  key: RABBITMQ_DEFAULT_USER
            - name: RABBITMQ_DEFAULT_PASS
              valueFrom:
                configMapKeyRef:
                  name: rabbitmq-credentials
                  key: RABBITMQ_DEFAULT_PASS
            - name: RABBITMQ_DEFAULT_VHOST
              valueFrom:
                configMapKeyRef:
                  name: rabbitmq-credentials
                  key: RABBITMQ_DEFAULT_VHOST
          image: rabbitmq:3-management
          name: rabbitmq-container
          ports:
            - containerPort: 5672
            - containerPort: 15672
          volumeMounts:
            - mountPath: /var/lib/rabbitmq/data
              name: rabbitmq-volume-mount
      restartPolicy: Always
      volumes:
        - name: rabbitmq-volume-mount
          persistentVolumeClaim:
            claimName: rabbitmq-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq
  labels:
    app: rabbitmq
spec:
  ports:
    - port: 5672
      protocol: TCP
      targetPort: 5672
      name: amqp
    - port: 15672
      protocol: TCP
      targetPort: 15672
      name: http
  selector:
    app: rabbitmq-container
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: rabbitmq-ingress
spec:
  rules:
    - host: rabbitmq.192.168.49.2.nip.io
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: rabbitmq
                port:
                  number: 15672
---
# PHP service
#################
# www persistent Volume
apiVersion: v1
kind: PersistentVolume
metadata:
  name: www-pv
  labels:
    type: local
spec:
  storageClassName: do-block-storage
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /data/www-pv
---
# www persistent Volume Claim
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: www-pvc
  labels:
    type: local
spec:
  storageClassName: do-block-storage
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  volumeName: www-pv
---
# PHP service config map
apiVersion: v1
kind: ConfigMap
metadata:
  name: php-service-config
  labels:
    app: php-service
data:
  DATABASE_URL: "postgresql://username:password@postgres:5432/pizza?serverVersion=13&charset=utf8"
  MESSENGER_TRANSPORT_DSN: "amqp://guest:guest@rabbitmq:5672/%2f/messages"
---
# PHP service deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: php-service
  name: php-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: php-service
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: php-service
    spec:
      containers:
        - image: pizza-service-php-7.4:dev
          imagePullPolicy: Never
          name: php-service
          ports:
            - containerPort: 9000
          env:
            - name: DATABASE_URL
              valueFrom:
                configMapKeyRef:
                  name: php-service-config
                  key: DATABASE_URL
            - name: PHP_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          resources: {}
          #volumeMounts:
          #  - name: shared-files
          #    mountPath: /var/www/html/public
          #command:
          #  - /bin/sh
          #  - -c
          #args:
          #  - "chown -R www-data:www-data /var/www/html/public && php-fpm"
        - name: nginx
          image: nginx:1.17.9
          ports:
            - containerPort: 8080
          #resources:
          #  limits:
          #    cpu: 6m
          #    memory: 8Mi
          #  requests:
          #    cpu: 4m
          #    memory: 5Mi
          volumeMounts:
            - name: nginx-config-volume
              mountPath: /etc/nginx/conf.d/default.conf
              subPath: default.conf
              readOnly: true
            - name: shared-files
              mountPath: /var/www/html/public
      initContainers:
        - name: init
          image: pizza-service-php-7.4:dev
          imagePullPolicy: Never
          volumeMounts:
            - name: shared-files
              mountPath: /volume
          command:
            - /bin/sh
            - -c
          args:
            - "cp -r /var/www/html/public /volume/public/"

      volumes:
        - name: nginx-config-volume
          configMap:
            name: nginx-config-map
            items:
              - key: default.conf
                path: default.conf
        - name: shared-files
          emptyDir: {}
          #persistentVolumeClaim:
          #  claimName: www-pvc
status: {}
---
# PHP service
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: php-service
  name: php-service
spec:
  ports:
    - name: http
      port: 8080
      targetPort: 8080
  selector:
    app: php-service
  type: ClusterIP
status:
  loadBalancer: {}
---
# Nginx
#################
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config-map
data:
  default.conf: |
    server {
        listen 8080;
        server_name _;
        root /var/www/html/public;

        gzip on;
        gzip_disable "msie6";

        gzip_vary on;
        gzip_proxied any;
        gzip_comp_level 6;
        gzip_buffers 16 8k;
        gzip_http_version 1.1;
        gzip_min_length 256;
        gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/vnd.ms-fontobject application/x-font-ttf font/opentype image/svg+xml image/x-icon;

        location / {
            try_files $uri /index.php$is_args$args;
        }

        location ~ ^/index\.php(/|$) {
            fastcgi_pass php-service:9000;
            fastcgi_split_path_info ^(.+\.php)(/.*)$;
            include fastcgi_params;

            fastcgi_buffer_size 128k;
            fastcgi_buffers 4 256k;

            fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
            fastcgi_param DOCUMENT_ROOT $realpath_root;
            internal;
        }

        location ~ \.php$ {
            return 404;
        }
    }
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nginx-ingress
spec:
  rules:
    - host: nginx.192.168.49.2.nip.io
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: php-service
                port:
                  number: 8080
